package akka.persistence.kafka

import java.io._

import scala.collection.immutable.Seq

import kafka.serializer._
import kafka.utils.VerifiableProperties

/**
 * Event published to user-defined topics.
 *
 * @param persistenceId Id of the persistent actor that generates event `data`.
 * @param sequenceNr Sequence number of the event.
 * @param data Event data generated by a persistent actor.
 */
case class Event(persistenceId: String, sequenceNr: Long, data: Any)

/**
 * Defines a mapping of events to user-defined topics.
 */
trait EventTopicMapper {
  /**
   * Maps an event to zero or more topics.
   *
   * @param event event to be mapped.
   * @return a sequence of topic names.
   */
  def topicsFor(event: Event): Seq[String]
}

class DefaultEventTopicMapper extends EventTopicMapper {
  def topicsFor(event: Event): Seq[String] = List("events")
}

class EmptyEventTopicMapper extends EventTopicMapper {
  def topicsFor(event: Event): Seq[String] = Nil
}

class DefaultEventEncoder(props: VerifiableProperties = null) extends Encoder[Event] {
  def toBytes(event: Event): Array[Byte] = {
    val bos = new ByteArrayOutputStream
    val oos = new ObjectOutputStream(bos)
    oos.writeObject(event)
    oos.close()
    bos.toByteArray
  }
}

class DefaultEventDecoder(props: VerifiableProperties = null) extends Decoder[Event] {
  def fromBytes(bytes: Array[Byte]): Event = {
    val bis = new ByteArrayInputStream(bytes)
    val ois = new ObjectInputStream(bis)
    val obj = ois.readObject().asInstanceOf[Event]
    ois.close()
    obj
  }
}

